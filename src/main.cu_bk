#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>

//product in categoryIdList and price >= 100
__global__ void findProductCategoryKernel(
  int* out,
  int* productId,
  int* productCategoryId,
  int* productPrice,
  int* categoryIdSize
)
{
  int i = blockIdx.x * threadIdx.x;
  out[i] = 0;

  for (int k = 0; k < (*categoryIdSize); k++)
  {
    if (productId[i] == productCategoryId[k])
    {
      out[i] = 1;
      break;
    }
  }

  if (out[i] >= 0)
  {
    if (productPrice[i] < 100)
    {
      out[i] = 0;
    }
  }

}

int randRange(int lower, int upper)
{
  return (rand() % (upper - lower + 1)) + lower;
}



// Helper function for using CUDA to add vectors in parallel.
cudaError_t searchCuda(
  int* out,
  int* productId,
  int* productCategoryId,
  int* productPrice,
  int* categoryIdSize,
  int productSize
)
{
  int* dev_out = 0;
  int* dev_productId = 0;
  int* dev_productCategoryId = 0;
  int* dev_productPrice = 0;
  int* dev_categoryIdSize = 0;

  cudaError_t cudaStatus;

  int blockCount = productSize / 1024;
  int threadCount = 1024;
  int lastTreads = 0;
  clock_t toc;
  clock_t tic;
  // Choose which GPU to run on, change this on a multi-GPU system.
  cudaStatus = cudaSetDevice(0);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaSetDevice failed!  Do you have a CUDA-capable GPU installed?");
    goto Error;
  }

  printf("cudaMalloc \n");
  cudaStatus = cudaMalloc((void**)&dev_out, productSize * sizeof(int));
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMalloc failed!");
    goto Error;
  }

  cudaStatus = cudaMalloc((void**)&dev_productId, productSize * sizeof(int));
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMalloc failed!");
    goto Error;
  }

  cudaStatus = cudaMalloc((void**)&dev_productPrice, productSize * sizeof(int));
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMalloc failed!");
    goto Error;
  }

  cudaStatus = cudaMalloc((void**)&dev_productCategoryId, (*categoryIdSize) * sizeof(int));
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMalloc failed!");
    goto Error;
  }

  cudaStatus = cudaMalloc((void**)&dev_categoryIdSize, sizeof(int));
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMalloc failed!");
    goto Error;
  }

  printf("cudaMemcpy \n");
  // Copy input vectors from host memory to GPU buffers.
  cudaStatus = cudaMemcpy(dev_productId, productId, productSize * sizeof(int), cudaMemcpyHostToDevice);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMemcpy failed!");
    goto Error;
  }

  cudaStatus = cudaMemcpy(dev_productPrice, productPrice, productSize * sizeof(int), cudaMemcpyHostToDevice);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMemcpy failed!");
    goto Error;
  }

  cudaStatus = cudaMemcpy(dev_productCategoryId, productCategoryId, (*categoryIdSize) * sizeof(int), cudaMemcpyHostToDevice);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMemcpy failed!");
    goto Error;
  }

  cudaStatus = cudaMemcpy(dev_categoryIdSize, categoryIdSize, sizeof(int), cudaMemcpyHostToDevice);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMemcpy failed!");
    goto Error;
  }

  printf("cudaRun \n");

  tic = clock();
  if (blockCount > 0)
  {
    threadCount = 1024;
    lastTreads = productSize - (1024 * blockCount);
  }

  if (blockCount == 0)
  {
    // Launch a kernel on the GPU with one thread for each element.
    findProductCategoryKernel <<<1, productSize >>> (
      dev_out,
      dev_productId,
      dev_productCategoryId,
      dev_productPrice,
      dev_categoryIdSize
    );
  }
  else
  {
    fprintf(stdout, "Info blockCount=%d, threadCount=%d \n", blockCount, threadCount);
    for (int block = 1; block < blockCount + 1; block++)
    {
      // Launch a kernel on the GPU with one thread for each element.
      findProductCategoryKernel <<< block, 1024 >>> (
        dev_out,
        dev_productId,
        dev_productCategoryId,
        dev_productPrice,
        dev_categoryIdSize
      );
    }

    if (lastTreads > 0)
    {
      fprintf(stdout, " \n LastTreads=%d \n", lastTreads);
      findProductCategoryKernel <<< blockCount+2, lastTreads >>> (
        dev_out,
        dev_productId,
        dev_productCategoryId,
        dev_productPrice,
        dev_categoryIdSize
      );
    }

  }
  toc = clock();
  printf("Elapsed GPU: %f seconds\n", (double)(toc - tic) / CLOCKS_PER_SEC);


  // Check for any errors launching the kernel
  cudaStatus = cudaGetLastError();
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "addKernel launch failed: %s\n", cudaGetErrorString(cudaStatus));
    goto Error;
  }

  // cudaDeviceSynchronize waits for the kernel to finish, and returns
  // any errors encountered during the launch.
  cudaStatus = cudaDeviceSynchronize();
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching addKernel!\n", cudaStatus);
    goto Error;
  }

  // Copy output vector from GPU buffer to host memory.
  cudaStatus = cudaMemcpy(out, dev_out, productSize * sizeof(int), cudaMemcpyDeviceToHost);
  if (cudaStatus != cudaSuccess)
  {
    fprintf(stderr, "cudaMemcpy failed!");
    goto Error;
  }

Error:
  cudaFree(dev_out);
  cudaFree(dev_productId);
  cudaFree(dev_productCategoryId);
  cudaFree(dev_productPrice);
  cudaFree(dev_categoryIdSize);

  return cudaStatus;
}

void findProductCategoryCpu(
  int* out,
  int* productId,
  int* productCategoryId,
  int* productPrice,
  int* categoryIdSize,
  int productSize
)
{
  for(int i=0; i< productSize; i++)
  {
    out[i] = 0;
    for (int k = 0; k < (*categoryIdSize); k++)
    {
      if (productId[i] == productCategoryId[k])
      {
        out[i] = 1;
        break;
      }
    }

    if (out[i] >= 0)
    {
      if (productPrice[i] < 100)
      {
        out[i] = 0;
      }
    }
  }
}

int main()
{
  const int productSize = 1024 * 1024 * 4;
  printf("Data count: %d \n", productSize);

  int* categoryIdSize = (int*)malloc(sizeof(int));
  *categoryIdSize = 3;

  int* productId = (int*)malloc(productSize * sizeof(int));
  int* productPrice = (int*)malloc(productSize * sizeof(int));
  int* productCategoryId = (int*)malloc((*categoryIdSize) * sizeof(int));

  int* out = (int*)malloc(productSize * sizeof(int));

  for (int k = 0; k < productSize; k++)
  {
    productId[k] = randRange(1, 10);
    productPrice[k] = randRange(200, 1000);
  }
  productCategoryId[0] = 2;
  productCategoryId[1] = 6;
  productCategoryId[2] = 3;

  fprintf(stdout, "DONE %d", sizeof(int));

  clock_t tic = clock();
  cudaError_t cudaStatusSearch = searchCuda(
                                   out,
                                   productId,
                                   productCategoryId,
                                   productPrice,
                                   categoryIdSize,
                                   productSize
                                 );

  clock_t toc = clock();
  printf("Elapsed GPU with memory: %f seconds\n", (double)(toc - tic) / CLOCKS_PER_SEC);

  if (cudaStatusSearch != cudaSuccess)
  {
    fprintf(stderr, "addWithCuda failed!");
    return 1;
  }


  tic = clock();
  findProductCategoryCpu(
    out,
    productId,
    productCategoryId,
    productPrice,
    categoryIdSize,
    productSize
  );
  toc = clock();
  printf("Elapsed CPU: %f seconds\n", (double)(toc - tic) / CLOCKS_PER_SEC);


  return 0;

  fprintf(stderr, "\n ");
  for (int k = 0; k < productSize; k++)
  {
    fprintf(stdout, "%d ", productId[k]);
  }
  fprintf(stderr, "\n ");
  for (int k = 0; k < productSize; k++)
  {
    fprintf(stdout, "%d ", productPrice[k]);
  }
  fprintf(stderr, "\n ");
  for (int k = 0; k < productSize; k++)
  {
    fprintf(stderr, "%d ", out[k]);
  }
  fprintf(stderr, "\n ");
  fprintf(stderr, "\n ");



  // cudaDeviceReset must be called before exiting in order for profiling and
  // tracing tools such as Nsight and Visual Profiler to show complete traces.
  cudaStatusSearch = cudaDeviceReset();
  if (cudaStatusSearch != cudaSuccess)
  {
    fprintf(stderr, "cudaDeviceReset failed!");
    return 1;
  }

  free(productCategoryId);
  free(productId);
  free(productPrice);
  free(out);
  free(categoryIdSize);

  return 0;
}

